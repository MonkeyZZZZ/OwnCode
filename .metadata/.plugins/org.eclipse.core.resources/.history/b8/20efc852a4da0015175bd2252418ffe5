package com.example.a26lbs;

import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {
	public static final int SHOW_LOCATION = 0;
	TextView txt;
	LocationManager manager;
	String provider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		txt = (TextView) findViewById(R.id.txt);
		manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		List<String> providerlList = manager.getProviders(true);
		if (providerlList.contains(LocationManager.GPS_PROVIDER)) {
			provider = LocationManager.GPS_PROVIDER;
		} else if (providerlList.contains(LocationManager.NETWORK_PROVIDER)) {
			provider = LocationManager.NETWORK_PROVIDER;
		} else {
			// 当没有可用的位置提供器时，弹出Toast提示用户
			Toast.makeText(this, "No location provider to use",
					Toast.LENGTH_SHORT).show();
			return;
		}
		Location location = manager.getLastKnownLocation(provider);
		if (location != null) {
			showLocation(location);
		}
		manager.requestLocationUpdates(provider, 5000, 1, locationListenner);
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		if (manager != null) {
			manager.removeUpdates(locationListenner);
		}

	}

	LocationListener locationListenner = new LocationListener() {

		@Override
		public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderEnabled(String arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderDisabled(String arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onLocationChanged(Location arg0) {
			// TODO Auto-generated method stub
			showLocation(arg0);
		}
	};

	private void showLocation(final Location location) {
		// TODO Auto-generated method stub
//		String currentPosition = "latitude is " + location.getLatitude() + "\n"
//				+ "longitude is " + location.getLongitude();
//		txt.setText(currentPosition);
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
			try {
				StringBuilder url=new StringBuilder();
				url.append("http://maps.googleapis.com/maps/api/geocode/json?latlng=");
				url.append(location.getLatitude()).append(",");
				url.append(location.getLongitude());
				url.append("&sensor=false");
				HttpClient httpClient = new DefaultHttpClient();
				HttpGet httpGet = new HttpGet(url.toString());
				// 在请求消息头中指定语言，保证服务器会返回中文数据
				httpGet.addHeader("Accept-Language", "zh-CN");
				HttpResponse httpResponse = httpClient.execute(httpGet);
				if (httpResponse.getStatusLine().getStatusCode() == 200) {
					HttpEntity entity = httpResponse.getEntity();
					String response = EntityUtils.toString(entity, "utf-8");
					JSONObject jsonObject = new JSONObject(response);
					// 获取results节点下的位置信息
					JSONArray resultArray = jsonObject.getJSONArray
					("results");
					if (resultArray.length() > 0) {
					JSONObject subObject = resultArray.
					getJSONObject(0);
					// 取出格式化后的位置信息
					String address = subObject.getString
					("formatted_address");
					Message message = new Message();
					message.what = SHOW_LOCATION;
					message.obj = address;
					handler.sendMessage(message);
					}
					}
			} catch (Exception e) {
				// TODO: handle exception
			}	
			}
		}).start();
	}
	private Handler handler = new Handler() {
		public void handleMessage(Message msg) {
		switch (msg.what) {
		case SHOW_LOCATION:
		String currentPosition = (String) msg.obj;
		txt.setText(currentPosition);
		break;
		default:
		break;
		}
		}
		};
}
